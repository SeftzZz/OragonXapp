{"version":3,"file":"default-node_modules_angular_service-worker_fesm2022_service-worker_mjs.js","mappings":"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ACgB,KAAK,CAACjD,KAAK,CAAC;IAChC,CAAC,CAAC,CAAC,CACE0D,SAAS,EAAE;EACpB;EACA,IAAIiB,SAASA,CAAA,EAAG;IACZ,OAAO,CAAC,CAAC,IAAI,CAACxC,aAAa;EAC/B;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMyC,MAAM,CAAC;EACT;AACJ;AACA;AACA;EACI,IAAID,SAASA,CAAA,EAAG;IACZ,OAAO,IAAI,CAAClB,EAAE,CAACkB,SAAS;EAC5B;EACAzG,WAAWA,CAACuF,EAAE,EAAE;IACZ,IAAI,CAACA,EAAE,GAAGA,EAAE;IACZ,IAAI,CAACoB,WAAW,GAAG,IAAI;IACvB,IAAI,CAACC,mBAAmB,GAAG,IAAI3E,0CAAO,EAAE;IACxC,IAAI,CAACsD,EAAE,CAACkB,SAAS,EAAE;MACf,IAAI,CAACI,QAAQ,GAAG7H,wCAAK;MACrB,IAAI,CAAC8H,kBAAkB,GAAG9H,wCAAK;MAC/B,IAAI,CAAC+H,YAAY,GAAG/H,wCAAK;MACzB;IACJ;IACA,IAAI,CAAC6H,QAAQ,GAAG,IAAI,CAACtB,EAAE,CAACa,YAAY,CAAC,MAAM,CAAC,CAAC7B,IAAI,CAACf,mDAAG,CAAClC,OAAO,IAAIA,OAAO,CAAC0D,IAAI,CAAC,CAAC;IAC/E,IAAI,CAAC8B,kBAAkB,GACnB,IAAI,CAACvB,EAAE,CAACa,YAAY,CAAC,oBAAoB,CAAC,CAAC7B,IAAI,CAACf,mDAAG,CAAE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","sources":["./node_modules/rxjs/_esm2015/internal/observable/never.js","./node_modules/rxjs/_esm2015/internal/operators/delay.js","./node_modules/rxjs/_esm2015/internal/operators/publish.js","./node_modules/rxjs/_esm2015/internal/util/isDate.js","./node_modules/@angular/service-worker/fesm2022/service-worker.mjs"],"sourcesContent":["import { Observable } from '../Observable';\nimport { noop } from '../util/noop';\nexport const NEVER = new Observable(noop);\nexport function never() {\n    return NEVER;\n}\n","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nexport function delay(delay, scheduler = async) {\n    const absoluteDelay = isDate(delay);\n    const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(delay);\n    return (source) => source.lift(new DelayOperator(delayFor, scheduler));\n}\nclass DelayOperator {\n    constructor(delay, scheduler) {\n        this.delay = delay;\n        this.scheduler = scheduler;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n    }\n}\nclass DelaySubscriber extends Subscriber {\n    constructor(destination, delay, scheduler) {\n        super(destination);\n        this.delay = delay;\n        this.scheduler = scheduler;\n        this.queue = [];\n        this.active = false;\n        this.errored = false;\n    }\n    static dispatch(state) {\n        const source = state.source;\n        const queue = source.queue;\n        const scheduler = state.scheduler;\n        const destination = state.destination;\n        while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n            queue.shift().notification.observe(destination);\n        }\n        if (queue.length > 0) {\n            const delay = Math.max(0, queue[0].time - scheduler.now());\n            this.schedule(state, delay);\n        }\n        else {\n            this.unsubscribe();\n            source.active = false;\n        }\n    }\n    _schedule(scheduler) {\n        this.active = true;\n        const destination = this.destination;\n        destination.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {\n            source: this, destination: this.destination, scheduler: scheduler\n        }));\n    }\n    scheduleNotification(notification) {\n        if (this.errored === true) {\n            return;\n        }\n        const scheduler = this.scheduler;\n        const message = new DelayMessage(scheduler.now() + this.delay, notification);\n        this.queue.push(message);\n        if (this.active === false) {\n            this._schedule(scheduler);\n        }\n    }\n    _next(value) {\n        this.scheduleNotification(Notification.createNext(value));\n    }\n    _error(err) {\n        this.errored = true;\n        this.queue = [];\n        this.destination.error(err);\n        this.unsubscribe();\n    }\n    _complete() {\n        this.scheduleNotification(Notification.createComplete());\n        this.unsubscribe();\n    }\n}\nclass DelayMessage {\n    constructor(time, notification) {\n        this.time = time;\n        this.notification = notification;\n    }\n}\n","import { Subject } from '../Subject';\nimport { multicast } from './multicast';\nexport function publish(selector) {\n    return selector ?\n        multicast(() => new Subject(), selector) :\n        multicast(new Subject());\n}\n","export function isDate(value) {\n    return value instanceof Date && !isNaN(+value);\n}\n","/**\n * @license Angular v16.0.2\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, NgZone, ApplicationRef, makeEnvironmentProviders, PLATFORM_ID, APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { defer, throwError, fromEvent, of, concat, Subject, NEVER, merge } from 'rxjs';\nimport { map, filter, switchMap, publish, take, tap, delay } from 'rxjs/operators';\n\nconst ERR_SW_NOT_SUPPORTED = 'Service workers are disabled or not supported by this browser';\nfunction errorObservable(message) {\n    return defer(() => throwError(new Error(message)));\n}\n/**\n * @publicApi\n */\nclass NgswCommChannel {\n    constructor(serviceWorker) {\n        this.serviceWorker = serviceWorker;\n        if (!serviceWorker) {\n            this.worker = this.events = this.registration = errorObservable(ERR_SW_NOT_SUPPORTED);\n        }\n        else {\n            const controllerChangeEvents = fromEvent(serviceWorker, 'controllerchange');\n            const controllerChanges = controllerChangeEvents.pipe(map(() => serviceWorker.controller));\n            const currentController = defer(() => of(serviceWorker.controller));\n            const controllerWithChanges = concat(currentController, controllerChanges);\n            this.worker = controllerWithChanges.pipe(filter((c) => !!c));\n            this.registration = (this.worker.pipe(switchMap(() => serviceWorker.getRegistration())));\n            const rawEvents = fromEvent(serviceWorker, 'message');\n            const rawEventPayload = rawEvents.pipe(map(event => event.data));\n            const eventsUnconnected = rawEventPayload.pipe(filter(event => event && event.type));\n            const events = eventsUnconnected.pipe(publish());\n            events.connect();\n            this.events = events;\n        }\n    }\n    postMessage(action, payload) {\n        return this.worker\n            .pipe(take(1), tap((sw) => {\n            sw.postMessage({\n                action,\n                ...payload,\n            });\n        }))\n            .toPromise()\n            .then(() => undefined);\n    }\n    postMessageWithOperation(type, payload, operationNonce) {\n        const waitForOperationCompleted = this.waitForOperationCompleted(operationNonce);\n        const postMessage = this.postMessage(type, payload);\n        return Promise.all([postMessage, waitForOperationCompleted]).then(([, result]) => result);\n    }\n    generateNonce() {\n        return Math.round(Math.random() * 10000000);\n    }\n    eventsOfType(type) {\n        let filterFn;\n        if (typeof type === 'string') {\n            filterFn = (event) => event.type === type;\n        }\n        else {\n            filterFn = (event) => type.includes(event.type);\n        }\n        return this.events.pipe(filter(filterFn));\n    }\n    nextEventOfType(type) {\n        return this.eventsOfType(type).pipe(take(1));\n    }\n    waitForOperationCompleted(nonce) {\n        return this.eventsOfType('OPERATION_COMPLETED')\n            .pipe(filter(event => event.nonce === nonce), take(1), map(event => {\n            if (event.result !== undefined) {\n                return event.result;\n            }\n            throw new Error(event.error);\n        }))\n            .toPromise();\n    }\n    get isEnabled() {\n        return !!this.serviceWorker;\n    }\n}\n\n/**\n * Subscribe and listen to\n * [Web Push\n * Notifications](https://developer.mozilla.org/en-US/docs/Web/API/Push_API/Best_Practices) through\n * Angular Service Worker.\n *\n * @usageNotes\n *\n * You can inject a `SwPush` instance into any component or service\n * as a dependency.\n *\n * <code-example path=\"service-worker/push/module.ts\" region=\"inject-sw-push\"\n * header=\"app.component.ts\"></code-example>\n *\n * To subscribe, call `SwPush.requestSubscription()`, which asks the user for permission.\n * The call returns a `Promise` with a new\n * [`PushSubscription`](https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription)\n * instance.\n *\n * <code-example path=\"service-worker/push/module.ts\" region=\"subscribe-to-push\"\n * header=\"app.component.ts\"></code-example>\n *\n * A request is rejected if the user denies permission, or if the browser\n * blocks or does not support the Push API or ServiceWorkers.\n * Check `SwPush.isEnabled` to confirm status.\n *\n * Invoke Push Notifications by pushing a message with the following payload.\n *\n * ```ts\n * {\n *   \"notification\": {\n *     \"actions\": NotificationAction[],\n *     \"badge\": USVString,\n *     \"body\": DOMString,\n *     \"data\": any,\n *     \"dir\": \"auto\"|\"ltr\"|\"rtl\",\n *     \"icon\": USVString,\n *     \"image\": USVString,\n *     \"lang\": DOMString,\n *     \"renotify\": boolean,\n *     \"requireInteraction\": boolean,\n *     \"silent\": boolean,\n *     \"tag\": DOMString,\n *     \"timestamp\": DOMTimeStamp,\n *     \"title\": DOMString,\n *     \"vibrate\": number[]\n *   }\n * }\n * ```\n *\n * Only `title` is required. See `Notification`\n * [instance\n * properties](https://developer.mozilla.org/en-US/docs/Web/API/Notification#Instance_properties).\n *\n * While the subscription is active, Service Worker listens for\n * [PushEvent](https://developer.mozilla.org/en-US/docs/Web/API/PushEvent)\n * occurrences and creates\n * [Notification](https://developer.mozilla.org/en-US/docs/Web/API/Notification)\n * instances in response.\n *\n * Unsubscribe using `SwPush.unsubscribe()`.\n *\n * An application can subscribe to `SwPush.notificationClicks` observable to be notified when a user\n * clicks on a notification. For example:\n *\n * <code-example path=\"service-worker/push/module.ts\" region=\"subscribe-to-notification-clicks\"\n * header=\"app.component.ts\"></code-example>\n *\n * You can read more on handling notification clicks in the [Service worker notifications\n * guide](guide/service-worker-notifications).\n *\n * @see [Push Notifications](https://developers.google.com/web/fundamentals/codelabs/push-notifications/)\n * @see [Angular Push Notifications](https://blog.angular-university.io/angular-push-notifications/)\n * @see [MDN: Push API](https://developer.mozilla.org/en-US/docs/Web/API/Push_API)\n * @see [MDN: Notifications API](https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API)\n * @see [MDN: Web Push API Notifications best practices](https://developer.mozilla.org/en-US/docs/Web/API/Push_API/Best_Practices)\n *\n * @publicApi\n */\nclass SwPush {\n    /**\n     * True if the Service Worker is enabled (supported by the browser and enabled via\n     * `ServiceWorkerModule`).\n     */\n    get isEnabled() {\n        return this.sw.isEnabled;\n    }\n    constructor(sw) {\n        this.sw = sw;\n        this.pushManager = null;\n        this.subscriptionChanges = new Subject();\n        if (!sw.isEnabled) {\n            this.messages = NEVER;\n            this.notificationClicks = NEVER;\n            this.subscription = NEVER;\n            return;\n        }\n        this.messages = this.sw.eventsOfType('PUSH').pipe(map(message => message.data));\n        this.notificationClicks =\n            this.sw.eventsOfType('NOTIFICATION_CLICK').pipe(map((message) => message.data));\n        this.pushManager = this.sw.registration.pipe(map(registration => registration.pushManager));\n        const workerDrivenSubscriptions = this.pushManager.pipe(switchMap(pm => pm.getSubscription()));\n        this.subscription = merge(workerDrivenSubscriptions, this.subscriptionChanges);\n    }\n    /**\n     * Subscribes to Web Push Notifications,\n     * after requesting and receiving user permission.\n     *\n     * @param options An object containing the `serverPublicKey` string.\n     * @returns A Promise that resolves to the new subscription object.\n     */\n    requestSubscription(options) {\n        if (!this.sw.isEnabled || this.pushManager === null) {\n            return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n        }\n        const pushOptions = { userVisibleOnly: true };\n        let key = this.decodeBase64(options.serverPublicKey.replace(/_/g, '/').replace(/-/g, '+'));\n        let applicationServerKey = new Uint8Array(new ArrayBuffer(key.length));\n        for (let i = 0; i < key.length; i++) {\n            applicationServerKey[i] = key.charCodeAt(i);\n        }\n        pushOptions.applicationServerKey = applicationServerKey;\n        return this.pushManager.pipe(switchMap(pm => pm.subscribe(pushOptions)), take(1))\n            .toPromise()\n            .then(sub => {\n            this.subscriptionChanges.next(sub);\n            return sub;\n        });\n    }\n    /**\n     * Unsubscribes from Service Worker push notifications.\n     *\n     * @returns A Promise that is resolved when the operation succeeds, or is rejected if there is no\n     *          active subscription or the unsubscribe operation fails.\n     */\n    unsubscribe() {\n        if (!this.sw.isEnabled) {\n            return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n        }\n        const doUnsubscribe = (sub) => {\n            if (sub === null) {\n                throw new Error('Not subscribed to push notifications.');\n            }\n            return sub.unsubscribe().then(success => {\n                if (!success) {\n                    throw new Error('Unsubscribe failed!');\n                }\n                this.subscriptionChanges.next(null);\n            });\n        };\n        return this.subscription.pipe(take(1), switchMap(doUnsubscribe)).toPromise();\n    }\n    decodeBase64(input) {\n        return atob(input);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: SwPush, deps: [{ token: NgswCommChannel }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: SwPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: SwPush, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: NgswCommChannel }]; } });\n\n/**\n * Subscribe to update notifications from the Service Worker, trigger update\n * checks, and forcibly activate updates.\n *\n * @see {@link guide/service-worker-communications Service worker communication guide}\n *\n * @publicApi\n */\nclass SwUpdate {\n    /**\n     * True if the Service Worker is enabled (supported by the browser and enabled via\n     * `ServiceWorkerModule`).\n     */\n    get isEnabled() {\n        return this.sw.isEnabled;\n    }\n    constructor(sw) {\n        this.sw = sw;\n        if (!sw.isEnabled) {\n            this.versionUpdates = NEVER;\n            this.available = NEVER;\n            this.activated = NEVER;\n            this.unrecoverable = NEVER;\n            return;\n        }\n        this.versionUpdates = this.sw.eventsOfType([\n            'VERSION_DETECTED',\n            'VERSION_INSTALLATION_FAILED',\n            'VERSION_READY',\n            'NO_NEW_VERSION_DETECTED',\n        ]);\n        this.available = this.versionUpdates.pipe(filter((evt) => evt.type === 'VERSION_READY'), map(evt => ({\n            type: 'UPDATE_AVAILABLE',\n            current: evt.currentVersion,\n            available: evt.latestVersion,\n        })));\n        this.activated = this.sw.eventsOfType('UPDATE_ACTIVATED');\n        this.unrecoverable = this.sw.eventsOfType('UNRECOVERABLE_STATE');\n    }\n    /**\n     * Checks for an update and waits until the new version is downloaded from the server and ready\n     * for activation.\n     *\n     * @returns a promise that\n     * - resolves to `true` if a new version was found and is ready to be activated.\n     * - resolves to `false` if no new version was found\n     * - rejects if any error occurs\n     */\n    checkForUpdate() {\n        if (!this.sw.isEnabled) {\n            return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n        }\n        const nonce = this.sw.generateNonce();\n        return this.sw.postMessageWithOperation('CHECK_FOR_UPDATES', { nonce }, nonce);\n    }\n    /**\n     * Updates the current client (i.e. browser tab) to the latest version that is ready for\n     * activation.\n     *\n     * In most cases, you should not use this method and instead should update a client by reloading\n     * the page.\n     *\n     * <div class=\"alert is-important\">\n     *\n     * Updating a client without reloading can easily result in a broken application due to a version\n     * mismatch between the [application shell](guide/glossary#app-shell) and other page resources,\n     * such as [lazy-loaded chunks](guide/glossary#lazy-loading), whose filenames may change between\n     * versions.\n     *\n     * Only use this method, if you are certain it is safe for your specific use case.\n     *\n     * </div>\n     *\n     * @returns a promise that\n     *  - resolves to `true` if an update was activated successfully\n     *  - resolves to `false` if no update was available (for example, the client was already on the\n     *    latest version).\n     *  - rejects if any error occurs\n     */\n    activateUpdate() {\n        if (!this.sw.isEnabled) {\n            return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n        }\n        const nonce = this.sw.generateNonce();\n        return this.sw.postMessageWithOperation('ACTIVATE_UPDATE', { nonce }, nonce);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: SwUpdate, deps: [{ token: NgswCommChannel }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: SwUpdate }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: SwUpdate, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: NgswCommChannel }]; } });\n\n/*!\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst SCRIPT = new InjectionToken('NGSW_REGISTER_SCRIPT');\nfunction ngswAppInitializer(injector, script, options, platformId) {\n    return () => {\n        if (!(isPlatformBrowser(platformId) && ('serviceWorker' in navigator) &&\n            options.enabled !== false)) {\n            return;\n        }\n        // Wait for service worker controller changes, and fire an INITIALIZE action when a new SW\n        // becomes active. This allows the SW to initialize itself even if there is no application\n        // traffic.\n        navigator.serviceWorker.addEventListener('controllerchange', () => {\n            if (navigator.serviceWorker.controller !== null) {\n                navigator.serviceWorker.controller.postMessage({ action: 'INITIALIZE' });\n            }\n        });\n        let readyToRegister$;\n        if (typeof options.registrationStrategy === 'function') {\n            readyToRegister$ = options.registrationStrategy();\n        }\n        else {\n            const [strategy, ...args] = (options.registrationStrategy || 'registerWhenStable:30000').split(':');\n            switch (strategy) {\n                case 'registerImmediately':\n                    readyToRegister$ = of(null);\n                    break;\n                case 'registerWithDelay':\n                    readyToRegister$ = delayWithTimeout(+args[0] || 0);\n                    break;\n                case 'registerWhenStable':\n                    readyToRegister$ = !args[0] ? whenStable(injector) :\n                        merge(whenStable(injector), delayWithTimeout(+args[0]));\n                    break;\n                default:\n                    // Unknown strategy.\n                    throw new Error(`Unknown ServiceWorker registration strategy: ${options.registrationStrategy}`);\n            }\n        }\n        // Don't return anything to avoid blocking the application until the SW is registered.\n        // Also, run outside the Angular zone to avoid preventing the app from stabilizing (especially\n        // given that some registration strategies wait for the app to stabilize).\n        // Catch and log the error if SW registration fails to avoid uncaught rejection warning.\n        const ngZone = injector.get(NgZone);\n        ngZone.runOutsideAngular(() => readyToRegister$.pipe(take(1)).subscribe(() => navigator.serviceWorker.register(script, { scope: options.scope })\n            .catch(err => console.error('Service worker registration failed with:', err))));\n    };\n}\nfunction delayWithTimeout(timeout) {\n    return of(null).pipe(delay(timeout));\n}\nfunction whenStable(injector) {\n    const appRef = injector.get(ApplicationRef);\n    return appRef.isStable.pipe(filter(stable => stable));\n}\nfunction ngswCommChannelFactory(opts, platformId) {\n    return new NgswCommChannel(isPlatformBrowser(platformId) && opts.enabled !== false ? navigator.serviceWorker :\n        undefined);\n}\n/**\n * Token that can be used to provide options for `ServiceWorkerModule` outside of\n * `ServiceWorkerModule.register()`.\n *\n * You can use this token to define a provider that generates the registration options at runtime,\n * for example via a function call:\n *\n * {@example service-worker/registration-options/module.ts region=\"registration-options\"\n *     header=\"app.module.ts\"}\n *\n * @publicApi\n */\nclass SwRegistrationOptions {\n}\n/**\n * @publicApi\n *\n * Sets up providers to register the given Angular Service Worker script.\n *\n * If `enabled` is set to `false` in the given options, the module will behave as if service\n * workers are not supported by the browser, and the service worker will not be registered.\n *\n * Example usage:\n * ```ts\n * bootstrapApplication(AppComponent, {\n *   providers: [\n *     provideServiceWorker('ngsw-worker.js')\n *   ],\n * });\n * ```\n */\nfunction provideServiceWorker(script, options = {}) {\n    return makeEnvironmentProviders([\n        SwPush,\n        SwUpdate,\n        { provide: SCRIPT, useValue: script },\n        { provide: SwRegistrationOptions, useValue: options },\n        {\n            provide: NgswCommChannel,\n            useFactory: ngswCommChannelFactory,\n            deps: [SwRegistrationOptions, PLATFORM_ID]\n        },\n        {\n            provide: APP_INITIALIZER,\n            useFactory: ngswAppInitializer,\n            deps: [Injector, SCRIPT, SwRegistrationOptions, PLATFORM_ID],\n            multi: true,\n        },\n    ]);\n}\n\n/**\n * @publicApi\n */\nclass ServiceWorkerModule {\n    /**\n     * Register the given Angular Service Worker script.\n     *\n     * If `enabled` is set to `false` in the given options, the module will behave as if service\n     * workers are not supported by the browser, and the service worker will not be registered.\n     */\n    static register(script, options = {}) {\n        return {\n            ngModule: ServiceWorkerModule,\n            providers: [provideServiceWorker(script, options)],\n        };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ServiceWorkerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ServiceWorkerModule }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ServiceWorkerModule, providers: [SwPush, SwUpdate] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ServiceWorkerModule, decorators: [{\n            type: NgModule,\n            args: [{ providers: [SwPush, SwUpdate] }]\n        }] });\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n// This file is not used to build this module. It is only used during editing\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ServiceWorkerModule, SwPush, SwRegistrationOptions, SwUpdate, provideServiceWorker };\n"],"names":["Observable","noop","NEVER","never","async","isDate","Subscriber","Notification","delay","scheduler","absoluteDelay","delayFor","now","Math","abs","source","lift","DelayOperator","constructor","call","subscriber","subscribe","DelaySubscriber","destination","queue","active","errored","dispatch","state","length","time","shift","notification","observe","max","schedule","unsubscribe","_schedule","add","scheduleNotification","message","DelayMessage","push","_next","value","createNext","_error","err","error","_complete","createComplete","Subject","multicast","publish","selector","Date","isNaN","i0","Injectable","InjectionToken","NgZone","ApplicationRef","makeEnvironmentProviders","PLATFORM_ID","APP_INITIALIZER","Injector","NgModule","isPlatformBrowser","defer","throwError","fromEvent","of","concat","merge","map","filter","switchMap","take","tap","ERR_SW_NOT_SUPPORTED","errorObservable","Error","NgswCommChannel","serviceWorker","worker","events","registration","controllerChangeEvents","controllerChanges","pipe","controller","currentController","controllerWithChanges","c","getRegistration","rawEvents","rawEventPayload","event","data","eventsUnconnected","type","connect","postMessage","action","payload","sw","toPromise","then","undefined","postMessageWithOperation","operationNonce","waitForOperationCompleted","Promise","all","result","generateNonce","round","random","eventsOfType","filterFn","includes","nextEventOfType","nonce","isEnabled","SwPush","pushManager","subscriptionChanges","messages","notificationClicks","subscription","workerDrivenSubscriptions","pm","getSubscription","requestSubscription","options","reject","pushOptions","userVisibleOnly","key","decodeBase64","serverPublicKey","replace","applicationServerKey","Uint8Array","ArrayBuffer","i","charCodeAt","sub","next","doUnsubscribe","success","input","atob","ɵfac","SwPush_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","ngDevMode","ɵsetClassMetadata","SwUpdate","versionUpdates","available","activated","unrecoverable","evt","current","currentVersion","latestVersion","checkForUpdate","activateUpdate","SwUpdate_Factory","SCRIPT","ngswAppInitializer","injector","script","platformId","navigator","enabled","addEventListener","readyToRegister$","registrationStrategy","strategy","args","split","delayWithTimeout","whenStable","ngZone","get","runOutsideAngular","register","scope","catch","console","timeout","appRef","isStable","stable","ngswCommChannelFactory","opts","SwRegistrationOptions","provideServiceWorker","provide","useValue","useFactory","deps","multi","ServiceWorkerModule","ngModule","providers","ServiceWorkerModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector"],"sourceRoot":"webpack:///","x_google_ignoreList":[0,1,2,3,4]}